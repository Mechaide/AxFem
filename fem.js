/* [NM][ok] Gauss points
    Modify from [A. Ortiz Bernardin, 2022] */
function Ax_gauss_points(N) {
    var x = [];
    if (N == 1) {
        x[1] = 0.0;
    } else if (N == 2) {
        x[1] = -0.577350269189625764509148780502;
        x[2] = 0.577350269189625764509148780502;
    } else if (N == 3) {
        x[1] = -0.774596669241483377035853079956;
        x[2] = 0.0;
        x[3] = 0.774596669241483377035853079956;
    } else if (N == 4) {
        x[1] = -0.861136311594052575223946488893;
        x[2] = -0.339981043584856264802665759103;
        x[3] = 0.339981043584856264802665759103;
        x[4] = 0.861136311594052575223946488893;
    } else if (N == 5) {
        x[1] = -0.906179845938663992797626878299;
        x[2] = -0.5384693101056830910363144207;
        x[3] = 0.0;
        x[4] = 0.5384693101056830910363144207;
        x[5] = 0.906179845938663992797626878299;
    } else if (N == 6) {
        x[1] = -0.932469514203152027812301554494;
        x[2] = -0.66120938646626451366139959502;
        x[3] = -0.238619186083196908630501721681;
        x[4] = 0.238619186083196908630501721681;
        x[5] = 0.66120938646626451366139959502;
        x[6] = 0.932469514203152027812301554494;
    } else if (N == 7) {
        x[1] = -0.949107912342758524526189684048;
        x[2] = -0.741531185599394439863864773281;
        x[3] = -0.405845151377397166906606412077;
        x[4] = 0.0;
        x[5] = 0.405845151377397166906606412077;
        x[6] = 0.741531185599394439863864773281;
        x[7] = 0.949107912342758524526189684048;
    } else if (N == 8) {
        x[1] = -0.960289856497536231683560868569;
        x[2] = -0.796666477413626739591553936476;
        x[3] = -0.525532409916328985817739049189;
        x[4] = -0.18343464249564980493947614236;
        x[5] = 0.18343464249564980493947614236;
        x[6] = 0.525532409916328985817739049189;
        x[7] = 0.796666477413626739591553936476;
        x[8] = 0.960289856497536231683560868569;
    } else if (N == 9) {
        x[1] = -0.968160239507626089835576202904;
        x[2] = -0.83603110732663579429942978807;
        x[3] = -0.613371432700590397308702039341;
        x[4] = -0.324253423403808929038538014643;
        x[5] = 0.0;
        x[6] = 0.324253423403808929038538014643;
        x[7] = 0.613371432700590397308702039341;
        x[8] = 0.83603110732663579429942978807;
        x[9] = 0.968160239507626089835576202904;
    } else if (N == 10) {
        x[1] = -0.973906528517171720077964012084;
        x[2] = -0.865063366688984510732096688423;
        x[3] = -0.679409568299024406234327365115;
        x[4] = -0.433395394129247290799265943166;
        x[5] = -0.14887433898163121088482600113;
        x[6] = 0.14887433898163121088482600113;
        x[7] = 0.433395394129247290799265943166;
        x[8] = 0.679409568299024406234327365115;
        x[9] = 0.865063366688984510732096688423;
        x[10] = 0.973906528517171720077964012084;
    } else if (N == 11) {
        x[1] = -0.978228658146056992803938001123;
        x[2] = -0.887062599768095299075157769304;
        x[3] = -0.730152005574049324093416252031;
        x[4] = -0.519096129206811815925725669459;
        x[5] = -0.269543155952344972331531985401;
        x[6] = 0;
        x[7] = 0.269543155952344972331531985401;
        x[8] = 0.519096129206811815925725669459;
        x[9] = 0.730152005574049324093416252031;
        x[10] = 0.887062599768095299075157769304;
        x[11] = 0.978228658146056992803938001123;
    } else if (N == 12) {
        x[1] = -0.981560634246719250690549090149;
        x[2] = -0.904117256370474856678465866119;
        x[3] = -0.769902674194304687036893833213;
        x[4] = -0.587317954286617447296702418941;
        x[5] = -0.367831498998180193752691536644;
        x[6] = -0.125233408511468915472441369464;
        x[7] = 0.125233408511468915472441369464;
        x[8] = 0.367831498998180193752691536644;
        x[9] = 0.587317954286617447296702418941;
        x[10] = 0.769902674194304687036893833213;
        x[11] = 0.904117256370474856678465866119;
        x[12] = 0.981560634246719250690549090149;
    } else if (N == 13) {
        x[1] = -0.984183054718588149472829448807;
        x[2] = -0.917598399222977965206547836501;
        x[3] = -0.801578090733309912794206489583;
        x[4] = -0.642349339440340220643984606996;
        x[5] = -0.448492751036446852877912852128;
        x[6] = -0.230458315955134794065528121098;
        x[7] = 0;
        x[8] = 0.230458315955134794065528121098;
        x[9] = 0.448492751036446852877912852128;
        x[10] = 0.642349339440340220643984606996;
        x[11] = 0.801578090733309912794206489583;
        x[12] = 0.917598399222977965206547836501;
        x[13] = 0.984183054718588149472829448807;
    } else if (N == 14) {
        x[1] = -0.986283808696812338841597266704;
        x[2] = -0.928434883663573517336391139378;
        x[3] = -0.82720131506976499318979474265;
        x[4] = -0.687292904811685470148019803019;
        x[5] = -0.515248636358154091965290718551;
        x[6] = -0.319112368927889760435671824168;
        x[7] = -0.10805494870734366206624465022;
        x[8] = 0.10805494870734366206624465022;
        x[9] = 0.319112368927889760435671824168;
        x[10] = 0.515248636358154091965290718551;
        x[11] = 0.687292904811685470148019803019;
        x[12] = 0.82720131506976499318979474265;
        x[13] = 0.928434883663573517336391139378;
        x[14] = 0.986283808696812338841597266704;
    } else if (N == 15) {
        x[1] = -0.987992518020485428489565718587;
        x[2] = -0.93727339240070590430775894771;
        x[3] = -0.848206583410427216200648320774;
        x[4] = -0.724417731360170047416186054614;
        x[5] = -0.570972172608538847537226737254;
        x[6] = -0.394151347077563369897207370981;
        x[7] = -0.201194093997434522300628303395;
        x[8] = 0;
        x[9] = 0.201194093997434522300628303395;
        x[10] = 0.394151347077563369897207370981;
        x[11] = 0.570972172608538847537226737254;
        x[12] = 0.724417731360170047416186054614;
        x[13] = 0.848206583410427216200648320774;
        x[14] = 0.93727339240070590430775894771;
        x[15] = 0.987992518020485428489565718587;
    } else if (N == 16) {
        x[1] = -0.98940093499164993259615417345;
        x[2] = -0.944575023073232576077988415535;
        x[3] = -0.865631202387831743880467897712;
        x[4] = -0.755404408355003033895101194847;
        x[5] = -0.617876244402643748446671764049;
        x[6] = -0.458016777657227386342419442984;
        x[7] = -0.28160355077925891323046050146;
        x[8] = -0.095012509837637440185319335425;
        x[9] = 0.095012509837637440185319335425;
        x[10] = 0.28160355077925891323046050146;
        x[11] = 0.458016777657227386342419442984;
        x[12] = 0.617876244402643748446671764049;
        x[13] = 0.755404408355003033895101194847;
        x[14] = 0.865631202387831743880467897712;
        x[15] = 0.944575023073232576077988415535;
        x[16] = 0.98940093499164993259615417345;
    } else if (N == 17) {
        x[1] = -0.990575475314417335675434019941;
        x[2] = -0.950675521768767761222716957896;
        x[3] = -0.880239153726985902122955694488;
        x[4] = -0.78151400389680140692523005552;
        x[5] = -0.657671159216690765850302216643;
        x[6] = -0.51269053708647696788624656863;
        x[7] = -0.351231763453876315297185517095;
        x[8] = -0.178484181495847855850677493654;
        x[9] = 0;
        x[10] = 0.178484181495847855850677493654;
        x[11] = 0.351231763453876315297185517095;
        x[12] = 0.51269053708647696788624656863;
        x[13] = 0.657671159216690765850302216643;
        x[14] = 0.78151400389680140692523005552;
        x[15] = 0.880239153726985902122955694488;
        x[16] = 0.950675521768767761222716957896;
        x[17] = 0.990575475314417335675434019941;
    } else if (N == 18) {
        x[1] = -0.991565168420930946730016004706;
        x[2] = -0.95582394957139775518119589293;
        x[3] = -0.892602466497555739206060591127;
        x[4] = -0.803704958972523115682417455015;
        x[5] = -0.691687043060353207874891081289;
        x[6] = -0.559770831073947534607871548525;
        x[7] = -0.411751161462842646035931793833;
        x[8] = -0.251886225691505509588972854878;
        x[9] = -0.0847750130417353012422618529358;
        x[10] = 0.0847750130417353012422618529358;
        x[11] = 0.251886225691505509588972854878;
        x[12] = 0.411751161462842646035931793833;
        x[13] = 0.559770831073947534607871548525;
        x[14] = 0.691687043060353207874891081289;
        x[15] = 0.803704958972523115682417455015;
        x[16] = 0.892602466497555739206060591127;
        x[17] = 0.95582394957139775518119589293;
        x[18] = 0.991565168420930946730016004706;
    } else if (N == 19) {
        x[1] = -0.992406843843584403189017670253;
        x[2] = -0.960208152134830030852778840688;
        x[3] = -0.903155903614817901642660928532;
        x[4] = -0.822714656537142824978922486713;
        x[5] = -0.720966177335229378617095860824;
        x[6] = -0.600545304661681023469638164946;
        x[7] = -0.464570741375960945717267148104;
        x[8] = -0.31656409996362983199011732885;
        x[9] = -0.160358645640225375868096115741;
        x[10] = 0;
        x[11] = 0.160358645640225375868096115741;
        x[12] = 0.31656409996362983199011732885;
        x[13] = 0.464570741375960945717267148104;
        x[14] = 0.600545304661681023469638164946;
        x[15] = 0.720966177335229378617095860824;
        x[16] = 0.822714656537142824978922486713;
        x[17] = 0.903155903614817901642660928532;
        x[18] = 0.960208152134830030852778840688;
        x[19] = 0.992406843843584403189017670253;
    } else if (N == 20) {
        x[1] = -0.993128599185094924786122388471;
        x[2] = -0.963971927277913791267666131197;
        x[3] = -0.912234428251325905867752441203;
        x[4] = -0.839116971822218823394529061702;
        x[5] = -0.746331906460150792614305070356;
        x[6] = -0.636053680726515025452836696226;
        x[7] = -0.510867001950827098004364050955;
        x[8] = -0.373706088715419560672548177025;
        x[9] = -0.227785851141645078080496195369;
        x[10] = -0.0765265211334973337546404093988;
        x[11] = 0.0765265211334973337546404093988;
        x[12] = 0.227785851141645078080496195369;
        x[13] = 0.373706088715419560672548177025;
        x[14] = 0.510867001950827098004364050955;
        x[15] = 0.636053680726515025452836696226;
        x[16] = 0.746331906460150792614305070356;
        x[17] = 0.839116971822218823394529061702;
        x[18] = 0.912234428251325905867752441203;
        x[19] = 0.963971927277913791267666131197;
        x[20] = 0.993128599185094924786122388471;
    } else {
        console.log("GAUSS_WEIGHTS - Fatal error! Illegal value of N.");
        return false;
    }
    return x;
}
/* [NM][ok] Gauss weights
   Modify from [A. Ortiz BerNardiN, 2022] */
function Ax_gauss_weights(N) {
    var w = [];
    if (N == 1) {
        w[1] = 2.0;
    } else if (N == 2) {
        w[1] = 1.0;
        w[2] = 1.0;
    } else if (N == 3) {
        w[1] = 0.5555555555555555555555555555565;
        w[2] = 0.8888888888888888888888888888889;
        w[3] = 0.5555555555555555555555555555565;
    } else if (N == 4) {
        w[1] = 0.347854845137453857373063949222;
        w[2] = 0.652145154862546142626936050778;
        w[3] = 0.652145154862546142626936050778;
        w[4] = 0.347854845137453857373063949222;
    } else if (N == 5) {
        w[1] = 0.23692688505618908751426404072;
        w[2] = 0.478628670499366468041291514836;
        w[3] = 0.568888888888888888888888888889;
        w[4] = 0.478628670499366468041291514836;
        w[5] = 0.23692688505618908751426404072;
    } else if (N == 6) {
        w[1] = 0.171324492379170345040296142173;
        w[2] = 0.360761573048138607569833513838;
        w[3] = 0.46791393457269104738987034399;
        w[4] = 0.46791393457269104738987034399;
        w[5] = 0.360761573048138607569833513838;
        w[6] = 0.171324492379170345040296142173;
    } else if (N == 7) {
        w[1] = 0.129484966168869693270611432679;
        w[2] = 0.279705391489276667901467771424;
        w[3] = 0.381830050505118944950369775489;
        w[4] = 0.417959183673469387755102040816;
        w[5] = 0.381830050505118944950369775489;
        w[6] = 0.279705391489276667901467771424;
        w[7] = 0.129484966168869693270611432679;
    } else if (N == 8) {
        w[1] = 0.10122853629037625915253135431;
        w[2] = 0.222381034453374470544355994426;
        w[3] = 0.313706645877887287337962201987;
        w[4] = 0.362683783378361982965150449277;
        w[5] = 0.362683783378361982965150449277;
        w[6] = 0.313706645877887287337962201987;
        w[7] = 0.222381034453374470544355994426;
        w[8] = 0.10122853629037625915253135431;
    } else if (N == 9) {
        w[1] = 0.0812743883615744119718921581105;
        w[2] = 0.180648160694857404058472031243;
        w[3] = 0.260610696402935462318742869419;
        w[4] = 0.312347077040002840068630406584;
        w[5] = 0.330239355001259763164525069287;
        w[6] = 0.312347077040002840068630406584;
        w[7] = 0.260610696402935462318742869419;
        w[8] = 0.180648160694857404058472031243;
        w[9] = 0.0812743883615744119718921581105;
    } else if (N == 10) {
        w[1] = 0.0666713443086881375935688098933;
        w[2] = 0.149451349150580593145776339658;
        w[3] = 0.219086362515982043995534934228;
        w[4] = 0.269266719309996355091226921569;
        w[5] = 0.295524224714752870173892994651;
        w[6] = 0.295524224714752870173892994651;
        w[7] = 0.269266719309996355091226921569;
        w[8] = 0.219086362515982043995534934228;
        w[9] = 0.149451349150580593145776339658;
        w[10] = 0.0666713443086881375935688098933;
    } else if (N == 11) {
        w[1] = 0.0556685671161736664827537204425;
        w[2] = 0.125580369464904624634694299224;
        w[3] = 0.186290210927734251426097641432;
        w[4] = 0.233193764591990479918523704843;
        w[5] = 0.262804544510246662180688869891;
        w[6] = 0.272925086777900630714483528336;
        w[7] = 0.262804544510246662180688869891;
        w[8] = 0.233193764591990479918523704843;
        w[9] = 0.186290210927734251426097641432;
        w[10] = 0.125580369464904624634694299224;
        w[11] = 0.0556685671161736664827537204425;
    } else if (N == 12) {
        w[1] = 0.047175336386511827194615961485;
        w[2] = 0.106939325995318430960254718194;
        w[3] = 0.160078328543346226334652529543;
        w[4] = 0.20316742672306592174906445581;
        w[5] = 0.233492536538354808760849898925;
        w[6] = 0.249147045813402785000562436043;
        w[7] = 0.249147045813402785000562436043;
        w[8] = 0.233492536538354808760849898925;
        w[9] = 0.20316742672306592174906445581;
        w[10] = 0.160078328543346226334652529543;
        w[11] = 0.106939325995318430960254718194;
        w[12] = 0.047175336386511827194615961485;
    } else if (N == 13) {
        w[1] = 0.040484004765315879520021592201;
        w[2] = 0.0921214998377284479144217759538;
        w[3] = 0.138873510219787238463601776869;
        w[4] = 0.178145980761945738280046691996;
        w[5] = 0.207816047536888502312523219306;
        w[6] = 0.22628318026289723841209018604;
        w[7] = 0.232551553230873910194589515269;
        w[8] = 0.22628318026289723841209018604;
        w[9] = 0.207816047536888502312523219306;
        w[10] = 0.178145980761945738280046691996;
        w[11] = 0.138873510219787238463601776869;
        w[12] = 0.0921214998377284479144217759538;
        w[13] = 0.040484004765315879520021592201;
    } else if (N == 14) {
        w[1] = 0.0351194603317518630318328761382;
        w[2] = 0.0801580871597602098056332770629;
        w[3] = 0.121518570687903184689414809072;
        w[4] = 0.157203167158193534569601938624;
        w[5] = 0.185538397477937813741716590125;
        w[6] = 0.205198463721295603965924065661;
        w[7] = 0.215263853463157790195876443316;
        w[8] = 0.215263853463157790195876443316;
        w[9] = 0.205198463721295603965924065661;
        w[10] = 0.185538397477937813741716590125;
        w[11] = 0.157203167158193534569601938624;
        w[12] = 0.121518570687903184689414809072;
        w[13] = 0.0801580871597602098056332770629;
        w[14] = 0.0351194603317518630318328761382;
    } else if (N == 15) {
        w[1] = 0.0307532419961172683546283935772;
        w[2] = 0.0703660474881081247092674164507;
        w[3] = 0.107159220467171935011869546686;
        w[4] = 0.139570677926154314447804794511;
        w[5] = 0.166269205816993933553200860481;
        w[6] = 0.186161000015562211026800561866;
        w[7] = 0.198431485327111576456118326444;
        w[8] = 0.202578241925561272880620199968;
        w[9] = 0.198431485327111576456118326444;
        w[10] = 0.186161000015562211026800561866;
        w[11] = 0.166269205816993933553200860481;
        w[12] = 0.139570677926154314447804794511;
        w[13] = 0.107159220467171935011869546686;
        w[14] = 0.0703660474881081247092674164507;
        w[15] = 0.0307532419961172683546283935772;
    } else if (N == 16) {
        w[1] = 0.027152459411754094851780572456;
        w[2] = 0.0622535239386478928628438369944;
        w[3] = 0.0951585116824927848099251076022;
        w[4] = 0.124628971255533872052476282192;
        w[5] = 0.149595988816576732081501730547;
        w[6] = 0.16915651939500253818931207903;
        w[7] = 0.182603415044923588866763667969;
        w[8] = 0.189450610455068496285396723208;
        w[9] = 0.189450610455068496285396723208;
        w[10] = 0.182603415044923588866763667969;
        w[11] = 0.16915651939500253818931207903;
        w[12] = 0.149595988816576732081501730547;
        w[13] = 0.124628971255533872052476282192;
        w[14] = 0.0951585116824927848099251076022;
        w[15] = 0.0622535239386478928628438369944;
        w[16] = 0.027152459411754094851780572456;
    } else if (N == 17) {
        w[1] = 0.0241483028685479319601100262876;
        w[2] = 0.0554595293739872011294401653582;
        w[3] = 0.0850361483171791808835353701911;
        w[4] = 0.111883847193403971094788385626;
        w[5] = 0.135136368468525473286319981702;
        w[6] = 0.154045761076810288081431594802;
        w[7] = 0.168004102156450044509970663788;
        w[8] = 0.176562705366992646325270990113;
        w[9] = 0.179446470356206525458265644262;
        w[10] = 0.176562705366992646325270990113;
        w[11] = 0.168004102156450044509970663788;
        w[12] = 0.154045761076810288081431594802;
        w[13] = 0.135136368468525473286319981702;
        w[14] = 0.111883847193403971094788385626;
        w[15] = 0.0850361483171791808835353701911;
        w[16] = 0.0554595293739872011294401653582;
        w[17] = 0.0241483028685479319601100262876;
    } else if (N == 18) {
        w[1] = 0.0216160135264833103133427102665;
        w[2] = 0.0497145488949697964533349462026;
        w[3] = 0.0764257302548890565291296776166;
        w[4] = 0.100942044106287165562813984925;
        w[5] = 0.1225552067114784601845191268;
        w[6] = 0.140642914670650651204731303752;
        w[7] = 0.154684675126265244925418003836;
        w[8] = 0.164276483745832722986053776466;
        w[9] = 0.169142382963143591840656470135;
        w[10] = 0.169142382963143591840656470135;
        w[11] = 0.164276483745832722986053776466;
        w[12] = 0.154684675126265244925418003836;
        w[13] = 0.140642914670650651204731303752;
        w[14] = 0.1225552067114784601845191268;
        w[15] = 0.100942044106287165562813984925;
        w[16] = 0.0764257302548890565291296776166;
        w[17] = 0.0497145488949697964533349462026;
        w[18] = 0.0216160135264833103133427102665;
    } else if (N == 19) {
        w[1] = 0.0194617882297264770363120414644;
        w[2] = 0.044814226765699600332838157402;
        w[3] = 0.069044542737641226580708258006;
        w[4] = 0.0914900216224499994644620941238;
        w[5] = 0.111566645547333994716023901682;
        w[6] = 0.128753962539336227675515784857;
        w[7] = 0.142606702173606611775746109442;
        w[8] = 0.152766042065859666778855400898;
        w[9] = 0.158968843393954347649956439465;
        w[10] = 0.161054449848783695979163625321;
        w[11] = 0.158968843393954347649956439465;
        w[12] = 0.152766042065859666778855400898;
        w[13] = 0.142606702173606611775746109442;
        w[14] = 0.128753962539336227675515784857;
        w[15] = 0.111566645547333994716023901682;
        w[16] = 0.0914900216224499994644620941238;
        w[17] = 0.069044542737641226580708258006;
        w[18] = 0.044814226765699600332838157402;
        w[19] = 0.0194617882297264770363120414644;
    } else if (N == 20) {
        w[1] = 0.0176140071391521183118619623519;
        w[2] = 0.0406014298003869413310399522749;
        w[3] = 0.062672048334109063569506535187;
        w[4] = 0.083276741576704748724758143222;
        w[5] = 0.10193011981724043503675013548;
        w[6] = 0.118194531961518417312377377711;
        w[7] = 0.131688638449176626898494499748;
        w[8] = 0.142096109318382051329298325067;
        w[9] = 0.149172986472603746787828737002;
        w[10] = 0.152753387130725850698084331955;
        w[11] = 0.152753387130725850698084331955;
        w[12] = 0.149172986472603746787828737002;
        w[13] = 0.142096109318382051329298325067;
        w[14] = 0.131688638449176626898494499748;
        w[15] = 0.118194531961518417312377377711;
        w[16] = 0.10193011981724043503675013548;
        w[17] = 0.083276741576704748724758143222;
        w[18] = 0.062672048334109063569506535187;
        w[19] = 0.0406014298003869413310399522749;
        w[20] = 0.0176140071391521183118619623519;
    } else {
        console.log("GAUSS_WEIGHTS - Fatal error! Illegal value of N.");
        return false;
    }
    return w;
}
/* [NM][ok] For "Ax_gauss_quadrature", to transform string polynomial for Gauss Lagrange quadrature */
function Ax_polynomial_string(string_function) {
    const arr_var = ["y", "Y", "x", "X", "z", "Z", "a", "A", "b", "B", "c", "C"];
    const arr_0 = ["f(x)=", "f[x] =", " "];
    var result = string_function;
    arr_var.forEach(i => {
        result = result.replaceAll(i, "(xi)");
    });
    arr_0.forEach(j => {
        result = result.replaceAll(j, "");
    });
    result = result.replaceAll("^", "**");
    return result;
}
/* [NM][ok] For "Ax_gauss_quadrature", to set automaticaly te polynomial degree after the transfomation of the string function */
function Ax_polynomial_degree(string_function) {
    var pow = "**";
    var str = null;
    var N = null;
    for (var i = 20; i >= 0; i--) {
        str = pow + i;
        if (string_function.includes(str) == true) {
            return i;
        }
    }
}
/* [NM][ok] Gauss Lagrange quadrature calculator with specific polynomial.
   The polynomial f(x) needs to be with "x" as independent variable 
   Example: f(x) = 5 + 3*x + 2*x^2 - x^3 - 4*x^4 */
function Ax_gauss_quadrature(f) {

    var I = 0;
    var wi = null;
    var F_ec = null;
    var Fi = null;
    var i = 1;
    const F = Ax_polynomial_string(f);
    const p = Ax_polynomial_degree(F);
    const Nd = 0.5 * (1 + p);
    const N = Math.round(Nd);
    const x = Ax_gauss_points(N);
    const w = Ax_gauss_weights(N);

    //[NM] To pass the variables for the publicaction
    var I_arr = [];
    var math = [];
    math["F_ec"] = F;
    math["p"] = p;
    math["Nd"] = Nd;
    math["N"] = N;

    x.forEach(xi => {
        wi = w[i]; // [NM] set Gauss weights   
        F_ec = F.replaceAll("xi", xi); // [NM] Replace variables with values
        Fi = Ax_eval(F_ec); // [NM] eval string function and calc.
        I_arr[i] = Fi * wi; // [NM] Fill result array
        I = I + I_arr[i]; // [NM] Calculation result integral

        //[NM] To pass the variables for the publicaction
        math["id"] = i;
        math["x_" + i] = xi;
        math["w_" + i] = wi;
        math["F_" + i] = Fi;
        math["I_" + i] = I;
        i++;
    });
    const latex = Ax_gauss_quadrature_calcs(math);
    return [latex, [I, I_arr, N]];
}
/* [NM] For "Ax_gauss_quadrature", with functions for Latex.js*/
function Ax_gauss_quadrature_calcs(math, to_string = true) {
    var arr = [];
    var result = "";
    var Ff = null;
    var xi = null;
    var wi = null;
    var Fi = null;
    var I = null;
    var I1 = null;
    var F = math.F_ec.replaceAll("xi", "\\xi").replaceAll("**", "^").replaceAll("*", "");
    arr.push(
        "\\text{The polynomial with } \\xi \\text{ as independent variable:}",
        "\\begin{matrix} f(\\xi) = " + F + " & -1< \\xi < 1  \\end{matrix}",
        "\\text{We expect to obtain the exact value of the integral for the polynomial degree } p \\text{ when the number of Gauss points }  N  \\text{ is} ",
        "p = " + math.p + " \\rarr N = 0.5(1 + p) = " + math.Nd + " \\approx " + math.N,
        "\\text{Evaluate } f(\\xi) \\text{ at Gauss point for } N = " + math.N
    );
    math["I_0"] = 0;
    for (var i = 1; i <= math.id; i++) {
        xi = math["x_" + i];
        wi = math["w_" + i];
        rnd_xi = Ax_round(xi, 4);
        rnd_wi = Ax_round(wi, 4);
        Fec = F.replaceAll("\\xi", rnd_xi);
        Fi = Ax_round(math["F_" + i], 4);
        I = math["I_" + i];
        rnd_I = Ax_round(I, 4);
        I1 = math["I_" + (i - 1)];
        rnd_I1 = Ax_round(I1, 4);
        arr.push(
            "x_{" + i + "} = " + xi + " \\approx " + rnd_xi + " \\newline " +
            "w_{" + i + "} = " + wi + " \\approx " + rnd_wi + " \\newline " +
            "f(x_{" + i + "}) = " + Fec + " = " + Fi + " \\newline " +
            " I_{" + i + "}= I_{" + (i - 1) + "} + f(x_{" + i + "}) w_{" + i + "} = " + rnd_I1 + " + (" + Fi + ")" + rnd_wi + " \\approx " + rnd_I
        );
    }
    arr.push("\\boxed{I=\\int_{-1}^{1} f(\\xi) d \\xi \\approx " + rnd_I + "}")

    if (to_string == true) {
        arr.forEach(i => {
            result = result + " " + i + " \\newline \\mskip5em \\newline ";
        });
        return result;
    } else {
        return arr;
    }
}
/* [NM] Shape functions 
   Modify from [Reddy,  2019] */
function Ax_N(xi, type = "lineal") {
    var N = []; // [NM] Se define variable matriz 1d
    if (type == "lineal") {
        N[1] = 0.5 * (1 - xi);
        N[2] = 0.5 * (1 + xi);
    } else if (type == "quadratic") {
        N[1] = -0.5 * xi * (1 - xi);
        N[2] = 1 - xi ^ 2;
        N[3] = 0.5 * xi * (1 + xi);
    } else if (type == "cubic") {
        N[1] = 0.0625 * (1 - xi) * (9 * xi * xi - 1.);
        N[2] = 0.5625 * (1 - xi ^ 2) * (1 - 3 * xi);
        N[3] = 0.5625 * (1 - xi ^ 2) * (1 + 3 * xi);
        N[4] = 0.0625 * (9 * xi ^ 2 - 1) * (1 + xi);
    }
    return [N];
}
/* [NM] Shape functions first derive 
   Modify from [Reddy,  2019] */
function Ax_dN(xi, he, type = "lineal", curved_element = false) {
    var dN = [];
    var J = Ax_J(he, curved_element);
    if (type == "lineal") {
        dN[1] = -0.5;
        dN[2] = 0.5;
    } else if (type == "quadratic") {
        dN[1] = -0.5 * (1 - 2 * xi);
        dN[2] = (-2 * xi) / J;
        dN[3] = 0.5 * (1 + 2 * xi);
    } else if (type == "cubic") {
        dN[1] = 0.0625 * (1 + 18 * xi - 27 * xi * xi);
        dN[2] = 0.5625 * (-3 - 2 * xi + 9 * xi * xi);
        dN[3] = 0.5625 * (3 - 2 * xi - 9 * xi * xi);
        dN[4] = 0.0625 * (18 * xi + 27 * xi * xi - 1);
    }
    dN.forEach((i) => {
        dN_J[i] = i / J;
    });
    return [dN, dN_J];
}
/* [NM] Shape functions second derive
   Modify from [Reddy,  2019] */
function Ax_d2N(xi, he, type = "lineal", curved_element = false) {
    var d2N = [];
    var d2N_J2 = [];
    var J2 = Ax_J(he, curved_element) ^ 2;
    if (type == "lineal") {
        d2N[1] = 0.0;
        d2N[2] = 0.0;
    } else if (type == "quadratic") {
        d2N[1] = 1.0;
        d2N[2] = -2.0;
        d2N[3] = 1.0;
    } else if (type == "cubic") {
        d2N[1] = 0.0625 * (18.0 - 54.0 * xi);
        d2N[2] = 0.5625 * (-2.0 + 18.0 * xi);
        d2N[3] = 0.5625 * (-2.0 - 18.0 * xi);
        d2N[4] = 0.0625 * (18.0 + 54.0 * xi);
    }
    d2N.forEach((i) => {
        d2N_J2[i] = i / J2;
    });
    return [d2N, d2N_J];
}
/* [NM] Jacobian of the transformation */
function Ax_J(he, curved_element = false) {
    var Je = null;
    if (curved_element == false) {
        Je = 0.5 * he;
    } else { // [NM] If the element is curved
        console.log("need more study...for 2D y 3D")
        return false;
    }
    return Je;
}
/* [NM] To calc string text "slow" */
function Ax_eval(ecuation) {
    return Function("return " + ecuation)();
}
function Ax_round(value, decimals) {
    return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);
}
